knitr::opts_chunk$set(echo = TRUE)
plotdata <- df %>%
count(location) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%")) %>%
arrange(desc(n)) %>%
head(10)
plotdata <- df %>%
count(location) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%")) %>%
arrange(desc(n))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(scales)
library(grid)
library(tidyr)
library(rstudioapi)
library(tidyverse)
library(lubridate,magrittr)
library(ggfortify)
library(tseries)
library('vars')
library('quantmod')
library(forecast)
main_dir<- dirname(dirname(rstudioapi::getSourceEditorContext()$path))
datadir<- paste0(main_dir,"/data")
data_path<- paste0(datadir,"/data.csv")
df=read.csv(data_path)
head(df)
str(df)
summary(df)
df$sampling_date=NULL
df$stn_code=NULL
df$agency=NULL
df$location_monitoring_station=NULL
head(df)
plotdata <- df %>%
count(state) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%"))
ggplot(plotdata, aes(x=reorder(state, n),y=pct)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = pctlabel), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_y_continuous(labels = percent) +
labs(y = "Percentage",x="State", title = "Percentage of Recording From Each State")
plotdata <- df %>%
count(location) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%")) %>%
arrange(desc(n))
plotdata
ggplot(plotdata, aes(x = reorder(location, n),y=pct)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = pctlabel), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_y_continuous(labels = percent) +
labs(y = "Percentage", title = "Percentage of Recording From Each Location")
knitr::opts_chunk$set(echo = TRUE)
plotdata <- df %>%
count(location) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%")) %>%
arrange(desc(n)) %>%
head(10)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(scales)
library(grid)
library(tidyr)
library(rstudioapi)
library(tidyverse)
library(lubridate,magrittr)
library(ggfortify)
library(tseries)
library('vars')
library('quantmod')
library(forecast)
main_dir<- dirname(dirname(rstudioapi::getSourceEditorContext()$path))
datadir<- paste0(main_dir,"/data")
data_path<- paste0(datadir,"/data.csv")
df=read.csv(data_path)
head(df)
str(df)
summary(df)
df$sampling_date=NULL
df$stn_code=NULL
df$agency=NULL
df$location_monitoring_station=NULL
head(df)
plotdata <- df %>%
count(state) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%"))
ggplot(plotdata, aes(x=reorder(state, n),y=pct)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = pctlabel), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_y_continuous(labels = percent) +
labs(y = "Percentage",x="State", title = "Percentage of Recording From Each State")
plotdata <- df %>%
count(location) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%")) %>%
arrange(desc(n)) %>%
head(10)
ggplot(plotdata, aes(x = reorder(location, n),y=pct)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = pctlabel), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_y_continuous(labels = percent) +
labs(y = "Percentage", title = "Percentage of Recording From Each Location")
plotdata <- df %>%
count(type) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%"))
ggplot(plotdata, aes(x = reorder(type, n), y=pct)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = pctlabel), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_y_continuous(labels = percent) +
labs(y = "Percentage", x="Area Type", title = "Percentage of Recording From Each Type of Area")
df$type[df$type %in% "Residential, Rural and other Areas"] <- "Residential"
df$type[df$type %in% "Residential and others"] <- "Residential"
df$type[df$type %in% "Industrial Area"] <- "Industrial"
df$type[df$type %in% "Industrial Areas"] <- "Industrial"
df$type[df$type %in% "RIRUO"] <- "Others"
df$type[df$type %in% "Sensitive"] <- "Others"
df$type[df$type %in% "Sensitive Areas"] <- "Others"
df$type[df$type %in% "Sensitive Area"] <- "Others"
df$type[is.na(df$type)]= "Others"
plotdata <- df %>%
count(type) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%"))
p1<-ggplot(plotdata, aes(x = reorder(type, n), y=pct)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = pctlabel), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_y_continuous(labels = percent) +
labs(y = "Percentage", x="Area Type", title = "Percentage of Recording From Each Type of Area")
p1
plot1=ggplot(df, aes(x = so2)) +
geom_histogram(binwidth=0.1, breaks= seq(0,100), colour="black", fill = "lightgreen")
plot2=ggplot(df, aes(x = no2)) +
geom_histogram(binwidth=1, breaks= seq(0,200),colour="black", fill = "lightgreen")
plot3=ggplot(df, aes(x = rspm)) +
geom_histogram(binwidth=100,  breaks= seq(0,500), fill = "lightgreen")
plot4=ggplot(df, aes(x = spm)) +
geom_histogram(binwidth=100, breaks= seq(0,1000) ,fill = "lightgreen")
plot5=ggplot(df, aes(x = pm2_5)) +
geom_histogram(binwidth=0.5, breaks= seq(0,300), colour="black", fill = "lightgreen")
grid.newpage()
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
pushViewport(viewport(layout = grid.layout(5, 1)))
print(plot1, vp = vplayout(1, 1))
print(plot2, vp = vplayout(2, 1))
print(plot3, vp = vplayout(3, 1))
print(plot4, vp = vplayout(4, 1))
print(plot5, vp = vplayout(5, 1))
df_c=df
data_c_path = paste0(datadir, "/data_c.csv")
df_c$pm2_5=NULL
df_c$date=NULL
head(df_c)
for(i in 1:7){
x=sum(is.na(df_c[i]))
print(paste(names(df_c[i]),x))}
df_c$so2[is.na(df_c$so2)]= mean(df_c$so2, na.rm = TRUE)
df_c$no2[is.na(df_c$no2)]= mean(df_c$no2, na.rm = TRUE)
df_c$rspm[is.na(df_c$rspm)]= mean(df_c$rspm, na.rm = TRUE)
df_c$spm[is.na(df_c$spm)]= mean(df_c$spm, na.rm = TRUE)
df_c <- df_c %>% na.omit(df_c)
for(i in 1:7){
x=sum(is.na(df_c[i]))
print(paste(names(df_c[i]),x))}
head(df_c)
str(df_c)
#data_c_path = paste0(datadir, "/data_c.csv")
#write.csv(df_c, data_c_path, row.names=FALSE)
#pairs(~ so2 + no2 + rspm + spm, data=df_c, col = 'blue')
#plot(df_c)
knitr::include_graphics("plot correlation-1.png")
knitr::include_graphics("plot correlation-2.png")
plotdata <- df_c %>%
group_by(state) %>%
summarize(mean_1 = mean(so2))
ggplot(plotdata, aes(x = reorder(state, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "So2 by state", y = "Mean of SO2", x ="State")
plotdata <- df_c %>%
group_by(state) %>%
summarize(mean_1 = mean(no2))
ggplot(plotdata, aes(x = reorder(state, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "No2 by state", y = "Mean of NO2", x ="State")
plotdata <- df_c  %>%
group_by(state) %>%
summarize(mean_1 = mean(rspm))
ggplot(plotdata, aes(x = reorder(state, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "RSPM by state", y = "Mean of RSPM", x ="State")
plotdata <- df_c  %>%
group_by(state) %>%
summarize(mean_1 = mean(spm))
ggplot(plotdata, aes(x = reorder(state, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "SPM by state", y = "Mean of SPM", x ="State")
plotdata <- df_c %>%
group_by(type) %>%
summarize(mean_1 = mean(so2))
plot1=ggplot(plotdata, aes(x = reorder(type, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(title = "So2 by area type", y = "Mean of SO2", x ="Area Type")
plotdata <- df_c %>%
group_by(type) %>%
summarize(mean_1 = mean(no2))
plot2=ggplot(plotdata, aes(x = reorder(type, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(title = "No2 by area type", y = "Mean of NO2", x ="Area Type")
plotdata <- df_c %>%
group_by(type) %>%
summarize(mean_1 = mean(rspm))
plot3=ggplot(plotdata, aes(x = reorder(type, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(title = "RSPM by area type", y = "Mean of RSPM", x ="Area Type")
plotdata <- df_c %>%
group_by(type) %>%
summarize(mean_1 = mean(spm))
plot4=ggplot(plotdata, aes(x = reorder(type, mean_1), y = mean_1)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(title = "SPM by area type", y = "Mean of SPM", x ="Area Type")
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1, vp = vplayout(1, 1))
print(plot2, vp = vplayout(1, 2))
print(plot3, vp = vplayout(2, 1))
print(plot4, vp = vplayout(2, 2))
data=subset(df, !is.na(pm2_5))
head(data)
str(data)
for(i in 1:9){
x=sum(is.na(data[i]))
print(paste(names(data[i]),x))}
data$so2[is.na(data$so2)]= mean(data$so2, na.rm = TRUE)
data$no2[is.na(data$no2)]= mean(data$no2, na.rm = TRUE)
data$rspm[is.na(data$rspm)]= mean(data$rspm, na.rm = TRUE)
data$spm=NULL
for(i in 1:8){
x=sum(is.na(data[i]))
print(paste(names(data[i]),x))}
data$date<-as.Date(data$date, "%Y-%m-%d")
data=data[(order(data$date,decreasing=FALSE)),]
#write.csv(data,"data_ts.csv", row.names=FALSE)
#check the data of noPmNA
table(data$state)
#split the dataset
splitByState <- split(data, data$state)
str(splitByState)
library(ggplot2)
for (i in 1:length(splitByState)){
loopdata<-splitByState[[i]]
#print(loopdata)
#print(as.character(names(splitByState[i])))
#draw graph
print(ggplot() +geom_line(data = loopdata,aes(x = date,y = pm2_5,colour = "pm2_5"),size=1) +
geom_line(data = loopdata,aes(x = date,y = so2,colour = "so2"),size=1) +
geom_line(data = loopdata,aes(x = date,y = no2,colour = "no2"),size=1) +
geom_line(data = loopdata,aes(x = date,y = rspm,colour = "rspm"),size=1) +
ggtitle(paste("State:",as.character(names(splitByState[i])))) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_colour_manual("",values = c("pm2_5" = "red","so2"="green","no2"="blue","rspm"="yellow"))+
xlab("Date")+ylab("Pollution"))
}
Madhya_Pradesh = data[which (data$state == 'Madhya Pradesh'), ]
Madhya_Pradesh = subset(data, select = -c(state, location, type))
Madhya_Pradesh$day <- floor_date(Madhya_Pradesh$date, "day")
Madhya_Pradesh = aggregate(cbind(so2,no2,rspm,pm2_5) ~ day, data = Madhya_Pradesh, FUN = mean, na.rm = TRUE)
MP_train= Madhya_Pradesh[1:697, ]
MP_train=subset(MP_train,select = -c(day))
MP_test= Madhya_Pradesh[698:727, ]
#as.numeric(as.Date("2014-01-01") - as.Date("2014-01-01"))
MP_train=ts(MP_train,start = c(2014,0),frequency = 365)
autoplot(MP_train) +
ggtitle("Time Series Plot of the Madhaya Pradesh Time-Series") +
theme(plot.title = element_text(hjust = 0.5))
apply(MP_train, 2, adf.test)
VARselect(MP_train,
type = "none", #type of deterministic regressors to include. We use none because the time series was made stationary using differencing above.
lag.max = 20) #highest lag order n= 10
var.a <- vars::VAR(MP_train,
lag.max = 10, #highest lag order for lag length selection according to the choosen ic
ic = "AIC", #information criterion
type = "none") #type of deterministic regressors to include
summary(var.a)
causality(var.a, #VAR model
cause = c("pm2_5")) #dependent variable. If not specified then first column of x is used. Multiple variables can be used.
fcast = predict(var.a, n.ahead =30) # we forecast over a month
par(mar = c(2.5,2.5,2.5,2.5))
plot(fcast)
f.val= fcast$fcst$pm2_5[,1]
a.val= MP_test[['pm2_5']] # the accuracy requires numeric vector only.
accuracy(f.val,a.val)
library(cluster)
library(lubridate)
start_date<- ymd("2015-01-01")
rec_clus_data<- df[df$date > start_date, ]
### remove rows with missing location
rec_clus_data<- rec_clus_data[!is.na(rec_clus_data$location), ]
loc_data<- rec_clus_data %>% group_by(location) %>%
summarise(mean_so2 = mean(so2, na.rm=TRUE),
mean_no2 = mean(no2, na.rm=TRUE),
mean_rspm = mean(rspm, na.rm=TRUE),
mean_spm = mean(spm, na.rm=TRUE),
mean_pm2_5 = mean(pm2_5, na.rm=TRUE)
) %>% data.frame()
head(loc_data)
num_loc = nrow(loc_data)
for (col in colnames(loc_data) ){
num_na<- sum(is.na(loc_data[col]))
perc_na<- round(100*num_na/num_loc, digits=2)
print(paste(col, num_na, perc_na))
}
loc_data$mean_so2[is.na(loc_data$mean_so2)]= mean(loc_data$mean_so2, na.rm = TRUE)
loc_data$mean_no2[is.na(loc_data$mean_no2)]= mean(loc_data$mean_no2, na.rm = TRUE)
#### set location as row names
rownames(loc_data)<- loc_data$location
#### drop unnecessary columns
clean_loc_data<- loc_data %>% dplyr::select(-c(mean_spm, mean_pm2_5, location))
head(clean_loc_data)
scaled_loc_data<- clean_loc_data
for (mean_col in colnames(scaled_loc_data)){
scaled_loc_data[mean_col]<- scale(scaled_loc_data[mean_col], center=TRUE, scale=TRUE)
}
max_k<- 20
wcss<- rep(NA, max_k-1)
for (k in c(2:max_k)){
k_clus<- kmeans(scaled_loc_data, centers = k, nstart = 10)
wcss[k-1]<- k_clus$tot.withinss
}
wcss_df<- data.frame(k=c(2:max_k), wcss = wcss)
wcss_fig<- wcss_df %>% ggplot(aes(x=k, y=wcss)) +
geom_line() + geom_point()
print(wcss_fig)
best_k<- 8
clus_loc<- kmeans(scaled_loc_data, centers = scaled_loc_data[1:best_k,], nstart = 10)
clus_grp<- data.frame(clus_loc$cluster) %>% setNames("cluster")
merged_res<- merge(clean_loc_data, clus_grp, by ='row.names', all=TRUE)
merged_res$cluster<- as.factor(merged_res$cluster)
### center of each cluster
center_data<- merged_res %>% group_by(cluster) %>%
summarise(num_city = n(),
cen_mean_so2 = mean(mean_so2, na.rm=TRUE),
cen_mean_no2 = mean(mean_no2, na.rm=TRUE),
cen_mean_rspm = mean(mean_rspm, na.rm=TRUE),
) %>% data.frame()
print(center_data)
clus_vis_so2<- merged_res %>% ggplot(aes(x=cluster, y=mean_so2)) +
geom_boxplot()
print(clus_vis_so2)
clus_vis_no2<- merged_res %>% ggplot(aes(x=cluster, y=mean_no2)) +
geom_boxplot()
print(clus_vis_no2)
clus_vis_rspm<- merged_res %>% ggplot(aes(x=cluster, y=mean_rspm)) +
geom_boxplot()
print(clus_vis_rspm)
figdir<- paste0(main_dir,"/figures")
# save elbow ss plot
ggsave(filename = "wcss_val_elbow.png", wcss_fig, path = figdir)
# save cluster vis
ggsave(filename = "so2_clus_boxplot.png", clus_vis_so2, path = figdir)
ggsave(filename = "no2_clus_boxplot.png", clus_vis_no2, path = figdir)
ggsave(filename = "rspm_clus_boxplot.png", clus_vis_rspm, path = figdir)
for(i in 1:7){
x=sum(is.na(df_c[i]))
print(paste(names(df_c[i]),x))}
